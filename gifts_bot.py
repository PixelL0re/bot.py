from telethon import TelegramClient, events
import sqlite3
import random

# –ö–æ–Ω—Ñ–∏–≥ Test DC (–ø–æ–ª—É—á–∏ API –Ω–∞ https://my.telegram.org/apps/test)
API_ID = 20594153  
API_HASH = "3b96d309703a9a58d6d8dc4b3eefdf12" 
BOT_TOKEN = "2200956077:AAHbKj_mTto6T7YSrzohuoVBi_44fhjvqAA"  

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Test DC
bot = TelegramClient('gift_bot', API_ID, API_HASH, test_servers=True).start(bot_token=BOT_TOKEN)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥–∞—Ä–∫–æ–≤ –∏ –∑–≤—ë–∑–¥
conn = sqlite3.connect('gifts.db')
cursor = conn.cursor()

# –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã
cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    stars INTEGER DEFAULT 0
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS gifts (
    gift_id INTEGER PRIMARY KEY,
    name TEXT,
    cost INTEGER
)
''')

# –ù–∞–ø–æ–ª–Ω—è–µ–º –±–∞–∑—É —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –ø–æ–¥–∞—Ä–∫–∞–º–∏ (–µ—Å–ª–∏ –ø—É—Å—Ç–æ)
cursor.execute("SELECT COUNT(*) FROM gifts")
if cursor.fetchone()[0] == 0:
    sample_gifts = [
        ("üéÆ –ò–≥—Ä–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞", 50),
        ("üì± –ß–µ—Ö–æ–ª –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞", 30),
        ("üéß –ù–∞—É—à–Ω–∏–∫–∏", 70),
        ("üíª –ö—É—Ä—Å –ø–æ Python", 100)
    ]
    cursor.executemany("INSERT INTO gifts (name, cost) VALUES (?, ?)", sample_gifts)
    conn.commit()

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.on(events.NewMessage(pattern='/start'))
async def start(event):
    user_id = event.sender_id
    cursor.execute("INSERT OR IGNORE INTO users (user_id, stars) VALUES (?, 100)", (user_id,))
    conn.commit()
    await event.reply(
        "üéÅ **–ú–∞–≥–∞–∑–∏–Ω –ø–æ–¥–∞—Ä–∫–æ–≤**\n"
        f"–£ —Ç–µ–±—è: 100 ‚≠ê\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/gifts - –°–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤\n"
        "/buy [–Ω–æ–º–µ—Ä] - –ö—É–ø–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫"
    )

# –ö–æ–º–∞–Ω–¥–∞ /gifts
@bot.on(events.NewMessage(pattern='/gifts'))
async def list_gifts(event):
    cursor.execute("SELECT gift_id, name, cost FROM gifts")
    gifts = cursor.fetchall()
    
    response = "üéÅ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏:**\n"
    for gift in gifts:
        response += f"{gift[0]}. {gift[1]} - {gift[2]} ‚≠ê\n"
    
    await event.reply(response)

# –ö–æ–º–∞–Ω–¥–∞ /buy
@bot.on(events.NewMessage(pattern='/buy (\d+)'))
async def buy_gift(event):
    user_id = event.sender_id
    gift_id = int(event.pattern_match.group(1))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∞—Ä–æ–∫
    cursor.execute("SELECT name, cost FROM gifts WHERE gift_id = ?", (gift_id,))
    gift = cursor.fetchone()
    
    if not gift:
        await event.reply("‚ùå –ü–æ–¥–∞—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    gift_name, cost = gift
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    cursor.execute("SELECT stars FROM users WHERE user_id = ?", (user_id,))
    stars = cursor.fetchone()[0]
    
    if stars >= cost:
        cursor.execute("UPDATE users SET stars = stars - ? WHERE user_id = ?", (cost, user_id))
        conn.commit()
        await event.reply(
            f"üéâ –¢—ã –∫—É–ø–∏–ª **{gift_name}** –∑–∞ {cost} ‚≠ê!\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å: {stars - cost} ‚≠ê"
        )
    else:
        await event.reply(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥! –ù—É–∂–Ω–æ {cost} ‚≠ê")

bot.run_until_disconnected()